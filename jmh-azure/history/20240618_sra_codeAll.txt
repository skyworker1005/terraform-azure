아래 코드는 Azure Databricks terraform module 이다.  Hub & Spoke network topology 그리고 보안을 고려한 Private endpoint 등으로 구성되어 있다. 
아래 코드를 기반으로 code refactoring 을 하려고 한다. 
우선 아래 코드에 대한 분석을 진행해줘 
Databricks control plane, Databricks spoke, Hub/Transit 이렇게 3개로 구분해서 분석해줘 

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/outputs.tf
```
output "hub_network_subnets" {
  value = module.subnet_addrs.network_cidr_blocks
}

# output "ipgroup_cidrs" {
#   value = module.spoke[*].ipgroup_cidrs
# }
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/main.tf
```
locals {
  hub_cidr_prefix     = split("/", var.hub_vnet_cidr)[1]
  firewall_newbits    = 26 - local.hub_cidr_prefix
  webauth_newbits     = 26 - local.hub_cidr_prefix
  privatelink_newbits = 24 - local.hub_cidr_prefix
  testvm_newbits      = 28 - local.hub_cidr_prefix
}

module "subnet_addrs" {
  source = "hashicorp/subnets/cidr"

  base_cidr_block = var.hub_vnet_cidr
  networks = [
    {
      name     = "firewall"
      new_bits = local.firewall_newbits
    },
    {
      name     = "webauth-host"
      new_bits = local.webauth_newbits
    },
    {
      name     = "webauth-container"
      new_bits = local.webauth_newbits
    },
    {
      name     = "privatelink"
      new_bits = local.privatelink_newbits
    },
    {
      name     = "testvm"
      new_bits = local.testvm_newbits
    }
  ]
}
# Define module "hub" with the source "./modules/azure_hub"
# Pass the required variables to the module
module "hub" {
  source = "./modules/azure_hub"

  location                = var.location
  hub_vnet_name           = var.hub_vnet_name
  hub_resource_group_name = var.hub_resource_group_name
  hub_vnet_cidr           = var.hub_vnet_cidr
  subnet_map              = module.subnet_addrs.network_cidr_blocks
  public_repos            = var.public_repos
  test_vm_password        = var.test_vm_password
  client_secret           = var.client_secret
  tags                    = var.tags
  application_id          = var.application_id 
}

# Define module "spoke" with a for_each loop to iterate over each spoke configuration
module "spoke" {
  for_each = {
    for index, spoke in var.spoke_config : spoke.prefix => spoke
  }

  source = "./modules/azure_spoke"

  # Pass the required variables to the module
  prefix    = each.value.prefix
  vnet_cidr = each.value.cidr
  tags      = each.value.tags

  location                 = var.location
  route_table_id           = module.hub.route_table_id
  metastore_id             = module.hub.metastore_id
  hub_vnet_name            = module.hub.vnet_name
  hub_resource_group_name  = module.hub.resource_group_name
  hub_vnet_id              = module.hub.vnet_id
  key_vault_id             = module.hub.key_vault_id
  ipgroup_id               = module.hub.ipgroup_id
  managed_disk_key_id      = module.hub.managed_disk_key_id
  managed_services_key_id  = module.hub.managed_services_key_id
  databricks_app_object_id = var.databricks_app_object_id
  hub_private_link_info    = module.hub.private_link_info
  tenant_id                = module.hub.tenant_id
  
  # depends_on = [module.hub]
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/versions.tf
```
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = ">=3.78.0"
    }

    databricks = {
      source  = "databricks/databricks"
      version = ">=1.29.0"
    }

  }
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/terraform.tfvars
```
application_id            = "61c8285a-8bc7-4d60-a13d-f21e12d4b627"
databricks_account_id     = "여기에 Databricks 계정 ID를 입력하세요"
location                  = "koreacentral"
hub_vnet_cidr             = "10.178.0.0/20"
hub_resource_group_name   = "kdphub-rg"
hub_vnet_name             = "kdphub"
public_repos              = ["python.org", "*.python.org", "pypi.org", "*.pypi.org", "pythonhosted.org", "*.pythonhosted.org", "cran.r-project.org", "*.cran.r-project.org", "r-project.org"]
spoke_config              = [
  {
    prefix = "kdpspoke1"
    cidr   = "10.178.16.0/20"
    tags   = {
      environment = "dev"
      project     = "kdp"
    }
  }
]
test_vm_password          = "linaAdmin123!"
tags                      = { name = "kdp" }
client_secret             = "qjJ8Q~tHgsWx39O2ClSSsHMgOIgCG3FUp32cdcEY"
databricks_app_object_id  = "ab9625a7-1b22-4c98-a9e0-fb5b361b0178"


```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/providers.tf
```
provider "azurerm" {
  features {}
}

provider "databricks" {
  host       = "https://accounts.azuredatabricks.net"
  account_id = var.databricks_account_id
  auth_type  = "azure-cli"
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/variables.tf
```
variable "application_id" {
	type = string
	description = "(Required) Application ID in Hub unitycatalog.tf"
}
variable "databricks_account_id" {
  type        = string
  description = "(Required) The Databricks account ID target for account-level operations"
}
variable "location" {
  type        = string
  description = "(Required) The location for the hub and spoke deployment"
}

variable "hub_vnet_cidr" {
  type        = string
  description = "(Required) The CIDR block for the hub Virtual Network"
}

variable "hub_resource_group_name" {
  type        = string
  description = "(Required) The name for the hub Resource Group"
}

variable "hub_vnet_name" {
  type        = string
  description = "(Required) The name for the hub Virtual Network"
}

variable "public_repos" {
  type        = list(string)
  description = "(Optional) List of public repository IP addresses to allow access to."
  default     = ["python.org", "*.python.org", "pypi.org", "*.pypi.org", "pythonhosted.org", "*.pythonhosted.org", "cran.r-project.org", "*.cran.r-project.org", "r-project.org"]
}

variable "spoke_config" {
  type = list(object(
    {
      prefix = string
      cidr   = string
      tags   = map(string)
    }
  ))
  description = "(Required) List of spoke configurations"
}

variable "test_vm_password" {
  type        = string
  description = "(Required) Password for the VM to be deployed in the hub for testing (in the absence of ExpressRoute etc.)"
}

variable "tags" {
  type        = map(string)
  description = "(Optional) Map of tags to attach to resources"
  default     = {}
}

variable "client_secret" {
  type        = string
  description = "(Required) The client secret for the service principal"
}

variable "databricks_app_object_id" {
  type        = string
  description = "(Required) The object ID of the AzureDatabricks App Registration"
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/outputs.tf
```
# The value of the "workspace_url" property represents the URL of the Databricks workspace
output "workspace_url" {
  value = azurerm_databricks_workspace.this.workspace_url
}

output "ipgroup_cidrs" {
  value = {
    ipgroup_host_cidr      = azurerm_ip_group_cidr.host.cidr
    ipgroup_container_cidr = azurerm_ip_group_cidr.container.cidr
  }
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/main.tf
```
# Define subnets using cidrsubnet function
locals {
  subnets = {
    "host" : cidrsubnet(var.vnet_cidr, 2, 0)
    "container" : cidrsubnet(var.vnet_cidr, 2, 1)
    "privatelink" : cidrsubnet(var.vnet_cidr, 2, 2)
  }

  # Generate a random string for dbfs_name
  dbfs_name = join("", ["dbstorage", random_string.dbfsnaming.result])
}

# Generate a random string for dbfsnaming
resource "random_string" "dbfsnaming" {
  special = false
  upper   = false
  length  = 13
}

# Create a resource group
resource "azurerm_resource_group" "this" {
  name     = "${var.prefix}-rg"
  location = var.location

  tags = var.tags
}

# Create a virtual network
resource "azurerm_virtual_network" "this" {
  name                = "${var.prefix}-vnet"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  address_space       = [var.vnet_cidr]

  tags = var.tags

  lifecycle {
    ignore_changes = [tags]
  }
}

# Create a network security group
resource "azurerm_network_security_group" "this" {
  name                = "${var.prefix}-databricks-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  tags = var.tags

  lifecycle {
    ignore_changes = [tags]
  }
}

# Associate the container subnet with the network security group
resource "azurerm_subnet_network_security_group_association" "container" {
  subnet_id                 = azurerm_subnet.container.id
  network_security_group_id = azurerm_network_security_group.this.id
}

# Associate the host subnet with the network security group
resource "azurerm_subnet_network_security_group_association" "host" {
  subnet_id                 = azurerm_subnet.host.id
  network_security_group_id = azurerm_network_security_group.this.id
}

# Create the container subnet
resource "azurerm_subnet" "container" {
  name                 = "${var.prefix}-container"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnets["container"]]

  delegation {
    name = "databricks-container-subnet-delegation"

    service_delegation {
      name = "Microsoft.Databricks/workspaces"
      actions = [
        "Microsoft.Network/virtualNetworks/subnets/join/action",
        "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
        "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
      ]
    }
  }
}

# Create the host subnet
resource "azurerm_subnet" "host" {
  name                 = "${var.prefix}-host"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnets["host"]]

  delegation {
    name = "databricks-host-subnet-delegation"

    service_delegation {
      name = "Microsoft.Databricks/workspaces"
      actions = [
        "Microsoft.Network/virtualNetworks/subnets/join/action",
        "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
        "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
      ]
    }
  }
}

# Create the privatelink subnet
resource "azurerm_subnet" "privatelink" {
  name                 = "${var.prefix}-privatelink"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnets["privatelink"]]
}

# Create the privatelink subnet
# resource "azurerm_subnet" "privatelink" {
#   name                 = "${var.prefix}-privatelink"
#   resource_group_name  = azurerm_resource_group.this.name
#   virtual_network_name = azurerm_virtual_network.this.name

#   address_prefixes = [local.subnets["privatelink"]]

#   enforce_private_link_endpoint_network_policies = true
# }

# Create a network security rule for AAD
resource "azurerm_network_security_rule" "aad" {
  name                        = "AllowAAD"
  priority                    = 200
  direction                   = "Outbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "443"
  source_address_prefix       = "VirtualNetwork"
  destination_address_prefix  = "AzureActiveDirectory"
  resource_group_name         = azurerm_resource_group.this.name
  network_security_group_name = azurerm_network_security_group.this.name
}

# Create a network security rule for Azure Front Door
resource "azurerm_network_security_rule" "azfrontdoor" {
  name                        = "AllowAzureFrontDoor"
  priority                    = 201
  direction                   = "Outbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "443"
  source_address_prefix       = "VirtualNetwork"
  destination_address_prefix  = "AzureFrontDoor.Frontend"
  resource_group_name         = azurerm_resource_group.this.name
  network_security_group_name = azurerm_network_security_group.this.name
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/dbfs_privatelink.tf
```
# # Define a private DNS zone for the dbfs_dfs resource
# resource "azurerm_private_dns_zone" "dbfs_dfs" {
#   name                = "privatelink.dfs.core.windows.net"
#   resource_group_name = azurerm_resource_group.this.name

#   tags = var.tags
# }

# # Define a private endpoint for the dbfs_dfs resource
# resource "azurerm_private_endpoint" "dbfs_dfs" {
#   name                = "dbfspe-dfs"
#   location            = azurerm_resource_group.this.location
#   resource_group_name = azurerm_resource_group.this.name
#   subnet_id           = azurerm_subnet.privatelink.id

#   # Define the private service connection for the dbfs_dfs resource
#   private_service_connection {
#     name                           = "ple-${var.prefix}-dbfs-dfs"
#     private_connection_resource_id = join("", [azurerm_databricks_workspace.this.managed_resource_group_id, "/providers/Microsoft.Storage/storageAccounts/", local.dbfs_name])
#     is_manual_connection           = false
#     subresource_names              = ["dfs"]
#   }

#   # Associate the private DNS zone with the private endpoint
#   private_dns_zone_group {
#     name                 = "private-dns-zone-dbfs"
#     private_dns_zone_ids = [azurerm_private_dns_zone.dbfs_dfs.id]
#   }

#   tags = var.tags
# }

# # Define a virtual network link for the dbfs_dfs private DNS zone
# resource "azurerm_private_dns_zone_virtual_network_link" "dbfs_dfs" {
#   name                  = "dbfs-dfs"
#   resource_group_name   = azurerm_resource_group.this.name
#   private_dns_zone_name = azurerm_private_dns_zone.dbfs_dfs.name
#   virtual_network_id    = azurerm_virtual_network.this.id

#   tags = var.tags
# }

# # Define a private endpoint for the dbfs_blob resource
# resource "azurerm_private_endpoint" "dbfspe_blob" {
#   name                = "dbfs-blob"
#   location            = azurerm_resource_group.this.location
#   resource_group_name = azurerm_resource_group.this.name
#   subnet_id           = azurerm_subnet.privatelink.id

#   # Define the private service connection for the dbfs_blob resource
#   private_service_connection {
#     name                           = "ple-${var.prefix}-dbfs-blob"
#     private_connection_resource_id = join("", [azurerm_databricks_workspace.this.managed_resource_group_id, "/providers/Microsoft.Storage/storageAccounts/", local.dbfs_name])
#     is_manual_connection           = false
#     subresource_names              = ["blob"]
#   }

#   # Associate the private DNS zone with the private endpoint
#   private_dns_zone_group {
#     name                 = "private-dns-zone-dbfs"
#     private_dns_zone_ids = [azurerm_private_dns_zone.dbfs_blob.id]
#   }

#   tags = var.tags
# }

# # Define a private DNS zone for the dbfs_blob resource
# resource "azurerm_private_dns_zone" "dbfs_blob" {
#   name                = "privatelink.blob.core.windows.net"
#   resource_group_name = azurerm_resource_group.this.name

#   tags = var.tags
# }

# # Define a virtual network link for the dbfs_blob private DNS zone
# resource "azurerm_private_dns_zone_virtual_network_link" "dbfs_blob" {
#   name                  = "dbfs-blob"
#   resource_group_name   = azurerm_resource_group.this.name
#   private_dns_zone_name = azurerm_private_dns_zone.dbfs_blob.name
#   virtual_network_id    = azurerm_virtual_network.this.id

#   tags = var.tags
# }
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/versions.tf
```
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = ">=3.65.0"
    }
    databricks = {
      source  = "databricks/databricks"
      version = ">=1.24.1"
    }
  }
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/frontend_privatelink.tf
```
# resource "azurerm_private_endpoint" "frontend" {
#   name                = "${var.prefix}-frontend"
#   location            = var.location
#   resource_group_name = var.hub_resource_group_name
#   subnet_id           = var.hub_private_link_info.subnet_id

#   private_service_connection {
#     name                           = "ple-${var.prefix}-front"
#     private_connection_resource_id = azurerm_databricks_workspace.this.id
#     is_manual_connection           = false
#     subresource_names              = ["databricks_ui_api"]
#   }

#   private_dns_zone_group {
#     name                 = "private-dns-zone-front"
#     private_dns_zone_ids = [var.hub_private_link_info.dns_zone_id]
#   }
# }
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/backend_privatelink.tf
```
# Define a private endpoint resource for the backend
resource "azurerm_private_endpoint" "backend" {
  name                = "${var.prefix}-backend"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  subnet_id           = azurerm_subnet.privatelink.id

  # Configure the private service connection
  private_service_connection {
    name                           = "ple-${var.prefix}-backend"
    private_connection_resource_id = azurerm_databricks_workspace.this.id
    is_manual_connection           = false
    subresource_names              = ["databricks_ui_api"]
  }

  # Configure the private DNS zone group
  private_dns_zone_group {
    name                 = "private-dns-zone-backend"
    private_dns_zone_ids = [azurerm_private_dns_zone.backend.id]
  }

  tags = var.tags
}

#Define a private DNS zone resource for the backend
resource "azurerm_private_dns_zone" "backend" {
  name                = "privatelink.azuredatabricks.net"
  resource_group_name = azurerm_resource_group.this.name

  tags = var.tags
}

# Define a virtual network link for the private DNS zone and the backend virtual network
resource "azurerm_private_dns_zone_virtual_network_link" "backend" {
  name                  = "databricks-vnetlink-backend"
  resource_group_name   = azurerm_resource_group.this.name
  private_dns_zone_name = azurerm_private_dns_zone.backend.name
  virtual_network_id    = azurerm_virtual_network.this.id

  tags = var.tags
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/variables.tf
```
variable "is_storage_private_endpoint_enabled" {
  type        = bool
  description = "(Optional - default to false) Enable private endpoints for dbfs"
  default     = false
}

variable "location" {
  type        = string
  description = "(Required) The location for the spoke deployment"
}

variable "vnet_cidr" {
  # Note: following chart assumes a Vnet between /16 and /24, inclusive

  # | Subnet Size (CIDR) | Maximum ADB Cluster Nodes |
  # | /17	| 32763 |
  # | /18	| 16379 |
  # | /19	| 8187 |
  # | /20	| 4091 |
  # | /21	| 2043 |
  # | /22	| 1019 |
  # | /23	| 507 |
  # | /24	| 251 |
  # | /25	| 123 |
  # | /26	| 59 |

  type        = string
  description = "(Required) The CIDR block for the spoke Virtual Network"
  # default     = "10.2.1.0/24"
  validation {
    condition     = tonumber(split("/", var.vnet_cidr)[1]) > 15 && tonumber(split("/", var.vnet_cidr)[1]) < 25
    error_message = "CIDR block must be between /16 and /24, inclusive"
  }
}

variable "key_vault_id" {
  type        = string
  description = "(Required) ID of the Azure Key Vault containing the keys for CMK"

}
variable "route_table_id" {
  type        = string
  description = "(Required) The ID of the route table to associate with the Databricks subnets"
}

variable "metastore_id" {
  type        = string
  description = "(Required) The ID of the metastore to associate with the Databricks workspace"
}

variable "ipgroup_id" {
  type        = string
  description = "(Required) The ID of the IP Group used for firewall egress rules"
}

variable "hub_vnet_name" {
  type        = string
  description = "(Required) The name of the hub VNet to peer"
}

variable "hub_resource_group_name" {
  type        = string
  description = "(Required) The name of the hub Resource Group to peer"
}

variable "hub_vnet_id" {
  type        = string
  description = "(Required) The ID of the hub VNet to peer"
}

variable "managed_disk_key_id" {
  type    = string
  default = "(Required) The key for managed disk encryption"
}

variable "managed_services_key_id" {
  type    = string
  default = "(Required) The key for the managed services encryption"
}

variable "prefix" {
  type        = string
  description = "(Required) Naming prefix for resources"
}

variable "tags" {
  type        = map(string)
  description = "(Optional) Map of tags to attach to resources"
  default     = {}
}

variable "databricks_app_object_id" {
  type        = string
  description = "(Required) The object ID of the AzureDatabricks App Registration"
}

variable "hub_private_link_info" {
  type = object({
    dns_zone_id = string
    subnet_id   = string
  })
  description = "(Required) Hub Private link information"
}

variable "tenant_id" {
  type        = string
  description = "(Required) The tenant ID for the Azure subscription"
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/adb_workspace.tf
```
# Define an Azure Databricks workspace resource
resource "azurerm_databricks_workspace" "this" {
  name                                                = "${var.prefix}-adb-workspace"
  resource_group_name                                 = azurerm_resource_group.this.name
  location                                            = var.location
  sku                                                 = "premium"
  managed_disk_cmk_key_vault_key_id                   = var.managed_disk_key_id
  managed_services_cmk_key_vault_key_id               = var.managed_services_key_id
  managed_disk_cmk_rotation_to_latest_version_enabled = true
  customer_managed_key_enabled                        = true
  infrastructure_encryption_enabled                   = true
  public_network_access_enabled                       = false
  network_security_group_rules_required               = "NoAzureDatabricksRules"

  custom_parameters {
    no_public_ip                                         = true
    virtual_network_id                                   = azurerm_virtual_network.this.id
    public_subnet_name                                   = azurerm_subnet.host.name
    private_subnet_name                                  = azurerm_subnet.container.name
    public_subnet_network_security_group_association_id  = azurerm_subnet_network_security_group_association.host.id
    private_subnet_network_security_group_association_id = azurerm_subnet_network_security_group_association.container.id
  }

  tags = var.tags

  lifecycle {
    ignore_changes = [tags]
  }
}

resource "azurerm_databricks_workspace_root_dbfs_customer_managed_key" "this" {
  depends_on = [azurerm_key_vault_access_policy.databricks]

  workspace_id     = azurerm_databricks_workspace.this.workspace_id
  key_vault_key_id = var.managed_disk_key_id
}

# Define an Azure Key Vault access policy for Databricks
resource "azurerm_key_vault_access_policy" "databricks" {
  # depends_on = [azurerm_databricks_workspace.this]

  key_vault_id = var.key_vault_id
  tenant_id    = azurerm_databricks_workspace.this.storage_account_identity.0.tenant_id
  object_id    = azurerm_databricks_workspace.this.storage_account_identity.0.principal_id

  key_permissions = [
    "Get",
    "UnwrapKey",
    "WrapKey",
  ]
}

# Define an Azure Key Vault access policy for managed disks
resource "azurerm_key_vault_access_policy" "managed" {
  # depends_on = [azurerm_databricks_workspace.this]

  key_vault_id = var.key_vault_id
  tenant_id    = var.tenant_id
  object_id    = var.databricks_app_object_id

  key_permissions = [
    "Get",
    "UnwrapKey",
    "WrapKey",
  ]
}

# Define a Databricks metastore assignment
resource "databricks_metastore_assignment" "this" {
  # may need to use an explicit workspace-authenticated provider here
  # provider = databricks.workspace
  workspace_id = azurerm_databricks_workspace.this.workspace_id
  metastore_id = var.metastore_id
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_spoke/peering.tf
```
# Create a virtual network peering from the spoke network to the hub network
resource "azurerm_virtual_network_peering" "spoke_to_hub" {
  name                      = format("from-%s-to-%s-peer", azurerm_virtual_network.this.name, var.hub_vnet_name)
  resource_group_name       = azurerm_resource_group.this.name
  virtual_network_name      = azurerm_virtual_network.this.name
  remote_virtual_network_id = var.hub_vnet_id
}

# Create a virtual network peering from the hub network to the spoke network
resource "azurerm_virtual_network_peering" "hub_to_spoke" {
  name                      = format("from-%s-to-%s-peer", var.hub_vnet_name, azurerm_virtual_network.this.name)
  resource_group_name       = var.hub_resource_group_name
  virtual_network_name      = var.hub_vnet_name
  remote_virtual_network_id = azurerm_virtual_network.this.id
}

# Associate the route table with the host subnet
resource "azurerm_subnet_route_table_association" "host" {
  subnet_id      = azurerm_subnet.host.id
  route_table_id = var.route_table_id

  depends_on = [azurerm_virtual_network_peering.hub_to_spoke, azurerm_virtual_network_peering.spoke_to_hub]
}

# Associate the route table with the container subnet
resource "azurerm_subnet_route_table_association" "container" {
  subnet_id      = azurerm_subnet.container.id
  route_table_id = var.route_table_id

  depends_on = [azurerm_virtual_network_peering.hub_to_spoke, azurerm_virtual_network_peering.spoke_to_hub]
}

# Assign the host subnet CIDR to the IP group
resource "azurerm_ip_group_cidr" "host" {
  ip_group_id = var.ipgroup_id
  cidr        = local.subnets["host"]
}

# Assign the container subnet CIDR to the IP group
resource "azurerm_ip_group_cidr" "container" {
  ip_group_id = var.ipgroup_id
  cidr        = local.subnets["container"]
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/outputs.tf
```
output "client_config" {
  value = data.azurerm_client_config.current
}

output "firewall_name" {
  value = azurerm_firewall.this.name
}

output "ipgroup_id" {
  value = azurerm_ip_group.this.id
}

output "route_table_id" {
  value = azurerm_route_table.this.id
}

output "key_vault_id" {
  value = azurerm_key_vault.example.id
}

output "managed_disk_key_id" {
  value = azurerm_key_vault_key.managed_disk.id
}

output "managed_services_key_id" {
  value = azurerm_key_vault_key.managed_services.id
}

output "vnet_id" {
  value = azurerm_virtual_network.this.id
}

output "vnet_name" {
  value = azurerm_virtual_network.this.name
}

output "metastore_id" {
  value = databricks_metastore.this.id
}

output "resource_group_name" {
  value = azurerm_resource_group.this.name
}

output "private_link_info" {
  value = {
    dns_zone_id = azurerm_private_dns_zone.auth_front.id
    subnet_id   = azurerm_subnet.privatelink.id
  }
}

output "tenant_id" {
  value = local.tenant_id
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/main.tf
```
# Define a variable to store the title-cased location
locals {
  title_cased_location = title(var.location)

  # Define a map to store service tags with their corresponding values
  service_tags = {
    "sql" : "Sql.${local.title_cased_location}",
    "storage" : "Storage.${local.title_cased_location}",
    "eventhub" : "EventHub.${local.title_cased_location}"
  }

  # Define a regular expression pattern to extract subscription ID and resource group from the resource group ID
  resource_regex = "/subscriptions/(.+)/resourceGroups/(.+)"

  # Extract the subscription ID using the regular expression pattern
  subscription_id = regex(local.resource_regex, azurerm_resource_group.this.id)[0]

  # Extract the resource group using the regular expression pattern
  resource_group = regex(local.resource_regex, azurerm_resource_group.this.id)[1]

  # Get the tenant ID from the current Azure client configuration
  tenant_id = data.azurerm_client_config.current.tenant_id

  # Generate a prefix for naming resources by combining the hub resource group name and a random string
  prefix = replace(replace(lower("${var.hub_resource_group_name}${random_string.naming.result}"), "rg", ""), "-", "")

  subnet_map = var.subnet_map
}

# Retrieve the current Azure client configuration
data "azurerm_client_config" "current" {}

# Generate a random string for naming resources
resource "random_string" "naming" {
  special = false
  upper   = false
  length  = 6
}

# Create the hub resource group
resource "azurerm_resource_group" "this" {
  name     = var.hub_resource_group_name
  location = var.location
  tags     = var.tags
}

# Create the hub virtual network
resource "azurerm_virtual_network" "this" {
  name                = var.hub_vnet_name
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  address_space       = [var.hub_vnet_cidr]

  lifecycle {
    ignore_changes = [tags]
  }
}

# Create the privatelink subnet
resource "azurerm_subnet" "privatelink" {
  name                 = "hub-privatelink"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnet_map["privatelink"]]
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/testvm.tf
```
# Define the subnet for the test VM using cidrsubnet function
locals {
  # Decode the JSON response from the ifconfig.co API to get the public IP address of the host machine
  ifconfig_co_json = jsondecode(data.http.my_public_ip.response_body)
}

# Define a variable for the test VM password
variable "test_vm_password" {
  type        = string
  description = "(Required) Password for the test VM"
}

# Create a subnet resource for the test VM
resource "azurerm_subnet" "testvmsubnet" {
  name                 = "${local.prefix}-testvmsubnet"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name
  address_prefixes     = [local.subnet_map["testvm"]]
}

# From https://github.com/databricks/terraform-databricks-examples/blob/main/modules/adb-with-private-links-exfiltration-protection/testvm.tf
# Create a network interface resource for the test VM
resource "azurerm_network_interface" "testvmnic" {
  name                = "${local.prefix}-testvm-nic"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  ip_configuration {
    name                          = "testvmip"
    subnet_id                     = azurerm_subnet.testvmsubnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.testvmpublicip.id
  }

  lifecycle {
    ignore_changes = [tags]
  }
}

# Create a network security group resource for the test VM
resource "azurerm_network_security_group" "testvm-nsg" {
  name                = "${local.prefix}-testvm-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  tags                = var.tags

  lifecycle {
    ignore_changes = [tags]
  }
}

# Associate the network security group with the network interface of the test VM
resource "azurerm_network_interface_security_group_association" "testvmnsgassoc" {
  network_interface_id      = azurerm_network_interface.testvmnic.id
  network_security_group_id = azurerm_network_security_group.testvm-nsg.id
}

# Retrieve the public IP address of the host machine using the ifconfig.co API
data "http" "my_public_ip" { // add your host machine ip into nsg

  url = "https://ifconfig.co/json"
  request_headers = {
    Accept = "application/json"
  }
}

# Create a network security rule to allow RDP traffic to the test VM
resource "azurerm_network_security_rule" "this" {
  name                        = "RDP"
  priority                    = 200
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "3389"
  source_address_prefixes     = [local.ifconfig_co_json.ip]
  destination_address_prefix  = "VirtualNetwork"
  network_security_group_name = azurerm_network_security_group.testvm-nsg.name
  resource_group_name         = azurerm_resource_group.this.name
}

# Create a public IP address resource for the test VM
resource "azurerm_public_ip" "testvmpublicip" {
  name                = "${local.prefix}-vmpublicip"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  allocation_method   = "Static"
  sku                 = "Standard"

  lifecycle {
    ignore_changes = [tags]
  }
}

# Create a Windows virtual machine resource for the test VM
resource "azurerm_windows_virtual_machine" "testvm" {
  name                = "pl-test-vm"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  size                = "Standard_F4s_v2"
  admin_username      = "azureuser"
  admin_password      = var.test_vm_password
  network_interface_ids = [
    azurerm_network_interface.testvmnic.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsDesktop"
    offer     = "windows-10"
    sku       = "19h2-pro-g2"
    version   = "latest"
  }

  lifecycle {
    ignore_changes = [tags]
  }
}

# Output the public IP address of the test VM
output "test_vm_public_ip" {
  value = azurerm_public_ip.testvmpublicip.ip_address
}

# Output the public IP address of the host machine
output "my_ip_addr" {
  value = local.ifconfig_co_json.ip
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/versions.tf
```
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = ">=3.65.0"
    }

    databricks = {
      source  = "databricks/databricks"
      version = ">=1.24.1"
    }

  }
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/keyvault.tf
```
# Why do `key_opts` and `key_permissions` differ in terms of required capitalization?
# Define the Azure Key Vault resource
resource "azurerm_key_vault" "example" {
  name                     = "example-hub-keyvault"
  location                 = azurerm_resource_group.this.location
  resource_group_name      = azurerm_resource_group.this.name
  tenant_id                = local.tenant_id
  purge_protection_enabled = true
  # enable_rbac_authorization = true

  sku_name = "premium"

  soft_delete_retention_days = 7

  lifecycle {
    ignore_changes = [tags]
  }
}

# Define a key in the Azure Key Vault for managed services
resource "azurerm_key_vault_key" "managed_services" {
  depends_on = [azurerm_key_vault_access_policy.terraform]

  name         = "adb-services"
  key_vault_id = azurerm_key_vault.example.id
  key_type     = "RSA"
  key_size     = 2048

  # Define the key options for the managed services key
  key_opts = [
    "decrypt",
    "encrypt",
    "sign",
    "unwrapKey",
    "verify",
    "wrapKey",
  ]
}

# Define a key in the Azure Key Vault for managed disks
resource "azurerm_key_vault_key" "managed_disk" {
  depends_on = [azurerm_key_vault_access_policy.terraform]

  name         = "adb-disk"
  key_vault_id = azurerm_key_vault.example.id
  key_type     = "RSA"
  key_size     = 2048

  # Define the key options for the managed disk key
  key_opts = [
    "decrypt",
    "encrypt",
    "sign",
    "unwrapKey",
    "verify",
    "wrapKey",
  ]
}

# resource "azurerm_role_assignment" "key_vault_reader" {
#   scope              = azurerm_key_vault.example.id
#   role_definition_id = "21090545-7ca7-4776-b22c-e363652d74d2"
#   principal_id       = data.azurerm_client_config.current.object_id
# }

# Define an access policy for the Azure Key Vault
resource "azurerm_key_vault_access_policy" "terraform" {
  key_vault_id = azurerm_key_vault.example.id
  tenant_id    = azurerm_key_vault.example.tenant_id
  object_id    = data.azurerm_client_config.current.object_id

  key_permissions = [
    "Get",
    "List",
    "Create",
    "Decrypt",
    "Encrypt",
    "Sign",
    "UnwrapKey",
    "Verify",
    "WrapKey",
    "Delete",
    "Restore",
    "Recover",
    "Update",
    "Purge",
    "GetRotationPolicy"
  ]
}

resource "azurerm_private_dns_zone" "key_vault" {
  name                = "privatelink.vaultcore.azure.net"
  resource_group_name = azurerm_resource_group.this.name
}

resource "azurerm_private_endpoint" "key_vault" {
  name                = "${local.prefix}-kv-pe"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  subnet_id           = azurerm_subnet.privatelink.id

  private_service_connection {
    name                           = "keyvault"
    private_connection_resource_id = azurerm_key_vault.example.id
    is_manual_connection           = false
    subresource_names              = ["vault"]
  }

  private_dns_zone_group {
    name                 = "keyvault"
    private_dns_zone_ids = [azurerm_private_dns_zone.key_vault.id]
  }

}

resource "azurerm_private_dns_zone_virtual_network_link" "key_vault" {
  name                  = "${local.prefix}-keyvault-vnetlink"
  resource_group_name   = azurerm_resource_group.this.name
  private_dns_zone_name = azurerm_private_dns_zone.key_vault.name
  virtual_network_id    = azurerm_virtual_network.this.id
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/unitycatalog.tf
```
# Define an Azure Databricks access connector resource
resource "azurerm_databricks_access_connector" "unity_catalog" {
  name                = "${local.prefix}-databricks-mi"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  identity {
    type = "SystemAssigned"
  }
}

# Define an Azure Storage Account resource
resource "azurerm_storage_account" "unity_catalog" {
  name                = "${local.prefix}unity"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  # tags                     = azurerm_resource_group.this.tags
  account_tier             = "Standard"
  account_replication_type = "GRS"
  is_hns_enabled           = true
  # public_network_access_enabled = true # should be false, but terraform 403s when false

  #   network_rules {
  #     default_action = "Deny"
  #     bypass         = ["None"]
  #     private_link_access {
  #       endpoint_resource_id = azurerm_databricks_access_connector.unity_catalog.id
  #     }
  #   }

  lifecycle {
    ignore_changes = [tags]
  }
}

# Define an Azure Storage Container resource
resource "azurerm_storage_container" "unity_catalog" {
  name                  = "${local.prefix}-container"
  storage_account_name  = azurerm_storage_account.unity_catalog.name
  container_access_type = "private"
}

# Define an Azure role assignment resource
resource "azurerm_role_assignment" "this" {
  scope                = azurerm_storage_account.unity_catalog.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_databricks_access_connector.unity_catalog.identity[0].principal_id
}

# Define a Databricks Metastore resource
resource "databricks_metastore" "this" {
  name = "${local.prefix}-metastore"
  storage_root = format("abfss://%s@%s.dfs.core.windows.net/",
    azurerm_storage_container.unity_catalog.name,
  azurerm_storage_account.unity_catalog.name)
  # owner         = "uc admins"
  region        = azurerm_resource_group.this.location
  force_destroy = true
}

# Define a Databricks Metastore Data Access resource
# TODO - figure out how to test internally with MI
resource "databricks_metastore_data_access" "this" {
  metastore_id = databricks_metastore.this.id
  name         = "${local.prefix}-dac"
  # azure_managed_identity {
  #   access_connector_id = azurerm_databricks_access_connector.unity_catalog.id
  # }
  azure_service_principal {
    directory_id   = local.tenant_id
    application_id = var.application_id
    client_secret  = var.client_secret
  }

  is_default = true

  lifecycle {
    ignore_changes = [azure_service_principal]
  }
}

resource "databricks_group" "this" {
  display_name = "${local.prefix}-uc-owners"
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/webauth.tf
```
# This resource block defines a subnet for the host
resource "azurerm_subnet" "host" {
  name                 = "webauth-host"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnet_map["webauth-host"]]

  # This delegation block specifies the actions that can be performed on the subnet by the Microsoft.Databricks/workspaces service
  delegation {
    name = "databricks-host-subnet-delegation"

    service_delegation {
      name = "Microsoft.Databricks/workspaces"
      actions = [
        "Microsoft.Network/virtualNetworks/subnets/join/action",
        "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
        "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
      ]
    }
  }
}

# This resource block defines a subnet for the container
resource "azurerm_subnet" "container" {
  name                 = "webauth-container"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnet_map["webauth-container"]]

  # This delegation block specifies the actions that can be performed on the subnet by the Microsoft.Databricks/workspaces service
  delegation {
    name = "databricks-container-subnet-delegation"

    service_delegation {
      name = "Microsoft.Databricks/workspaces"
      actions = [
        "Microsoft.Network/virtualNetworks/subnets/join/action",
        "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
        "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
      ]
    }
  }
}

# This resource block defines a network security group for webauth
resource "azurerm_network_security_group" "webauth" {
  name                = "webauth-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  lifecycle {
    ignore_changes = [tags]
  }
}

# This resource block associates the container subnet with the webauth network security group
resource "azurerm_subnet_network_security_group_association" "container" {
  subnet_id                 = azurerm_subnet.container.id
  network_security_group_id = azurerm_network_security_group.webauth.id
}

# This resource block associates the host subnet with the webauth network security group
resource "azurerm_subnet_network_security_group_association" "host" {
  subnet_id                 = azurerm_subnet.host.id
  network_security_group_id = azurerm_network_security_group.webauth.id
}

# This resource block defines a databricks workspace for webauth
resource "azurerm_databricks_workspace" "webauth" {
  name                                  = join("_", ["WEB_AUTH_DO_NOT_DELETE", upper(azurerm_resource_group.this.location)])
  resource_group_name                   = azurerm_resource_group.this.name
  location                              = azurerm_resource_group.this.location
  sku                                   = "premium"
  public_network_access_enabled         = false
  network_security_group_rules_required = "NoAzureDatabricksRules"

  # This custom_parameters block specifies additional parameters for the databricks workspace
  custom_parameters {
    no_public_ip                                         = true
    virtual_network_id                                   = azurerm_virtual_network.this.id
    private_subnet_name                                  = azurerm_subnet.container.name
    public_subnet_name                                   = azurerm_subnet.host.name
    private_subnet_network_security_group_association_id = azurerm_subnet_network_security_group_association.container.id
    public_subnet_network_security_group_association_id  = azurerm_subnet_network_security_group_association.host.id
  }

  tags = var.tags

  lifecycle {
    ignore_changes = [tags]
  }
}

# This resource block defines a private DNS zone Databricks
resource "azurerm_private_dns_zone" "auth_front" {
  name                = "privatelink.azuredatabricks.net"
  resource_group_name = azurerm_resource_group.this.name
}

# This resource block defines a private endpoint for webauth
resource "azurerm_private_endpoint" "webauth" {
  name                = "webauth-private-endpoint"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  subnet_id           = azurerm_subnet.privatelink.id

  depends_on = [azurerm_subnet.privatelink] # for proper destruction order

  # This private_service_connection block specifies the connection details for the private endpoint
  private_service_connection {
    name                           = "pl-webauth"
    private_connection_resource_id = azurerm_databricks_workspace.webauth.id
    is_manual_connection           = false
    subresource_names              = ["browser_authentication"]
  }

  # This private_dns_zone_group block specifies the private DNS zone to associate with the private endpoint
  private_dns_zone_group {
    name                 = "private-dns-zone-webauth"
    private_dns_zone_ids = [azurerm_private_dns_zone.auth_front.id]
  }
}

# resource "databricks_metastore_assignment" "webauth" {
#   workspace_id = azurerm_databricks_workspace.webauth.workspace_id
#   metastore_id = databricks_metastore.this.id
# }
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/variables.tf
```
# Define the variable "location" with type string and a description
variable "location" {
  type        = string
  description = "(Required) The location for the resources in this module"
}

# Define the variable "hub_resource_group_name" with type string and a description
variable "hub_resource_group_name" {
  type        = string
  description = "(Required) The name for the hub Resource Group"
}

# Define the variable "hub_vnet_name" with type string and a description
variable "hub_vnet_name" {
  type        = string
  description = "(Required) The name for the hub Virtual Network"
}

# Define the variable "hub_vnet_cidr" with type string and a description
variable "hub_vnet_cidr" {

  type        = string
  description = "(Required) The CIDR block for the hub Virtual Network"

  # Add validation for the CIDR block
  validation {
    condition     = tonumber(split("/", var.hub_vnet_cidr)[1]) < 24
    error_message = "CIDR block must be at least as large as /23"
  }
}

variable "subnet_map" {
  type        = map(string)
  description = "(Required) Map of subnet names to CIDR blocks"
}

# Define the variable "public_repos" with type list of strings and a description
variable "public_repos" {
  type        = list(string)
  description = "(Required) List of public repository IP addresses to allow access to."
}

# Define the variable "tags" with type map of strings and a description
variable "tags" {
  type        = map(string)
  description = "(Optional) Map of tags to attach to resources"
  default     = {}
}

variable "client_secret" {
  type        = string
  description = "(Required) The client secret for the service principal"
}

variable "application_id" {
	type = string
}```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/firewall.tf
```
# Define a subnet resource for the Azure Firewall
resource "azurerm_subnet" "firewall" {
  name                 = "AzureFirewallSubnet"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name

  address_prefixes = [local.subnet_map["firewall"]]
}

# Define a public IP resource for the Azure Firewall
resource "azurerm_public_ip" "this" {
  name                = "firewall-public-ip"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  allocation_method   = "Static"
  sku                 = "Standard"

  lifecycle {
    ignore_changes = [tags]
  }
}

# Define a firewall policy resource
resource "azurerm_firewall_policy" "this" {
  name                = "databricks-fwpolicy"
  resource_group_name = var.hub_resource_group_name
  location            = azurerm_resource_group.this.location
}

# Define an IP group resource
resource "azurerm_ip_group" "this" {
  name                = "databricks-subnets"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location

  lifecycle {
    ignore_changes = [cidrs]
  }
}

# Define a firewall policy rule collection group resource
resource "azurerm_firewall_policy_rule_collection_group" "this" {
  name               = "databricks"
  firewall_policy_id = azurerm_firewall_policy.this.id
  priority           = 200

  # Define network rule collection within the rule collection group
  network_rule_collection {
    name     = "databricks-network-rc"
    priority = 100
    action   = "Allow"

    # Define rules within the network rule collection
    rule {
      name                  = "adb-storage"
      protocols             = ["TCP", "UDP"]
      source_ip_groups      = [azurerm_ip_group.this.id]
      destination_addresses = [lookup(local.service_tags, "storage", "Storage")]
      destination_ports     = ["443"]
    }

    rule {
      name                  = "adb-sql"
      protocols             = ["TCP"]
      source_ip_groups      = [azurerm_ip_group.this.id]
      destination_addresses = [lookup(local.service_tags, "sql", "Sql")]
      destination_ports     = ["3306"]
    }

    rule {
      name                  = "adb-eventhub"
      protocols             = ["TCP"]
      source_ip_groups      = [azurerm_ip_group.this.id]
      destination_addresses = [lookup(local.service_tags, "eventhub", "EventHub")]
      destination_ports     = ["9093"]
    }
  }

  # Define application rule collection within the rule collection group
  application_rule_collection {
    name     = "databricks-app-rc"
    priority = 101
    action   = "Allow"

    # Define rules within the application rule collection
    rule {
      name              = "public-repos"
      source_ip_groups  = [azurerm_ip_group.this.id]
      destination_fqdns = var.public_repos
      protocols {
        port = "443"
        type = "Https"
      }
      protocols {
        port = "80"
        type = "Http"
      }
    }

    rule {
      name              = "IPinfo"
      source_ip_groups  = [azurerm_ip_group.this.id]
      destination_fqdns = ["*.ipinfo.io", "ipinfo.io"]
      protocols {
        port = "443"
        type = "Https"
      }
      protocols {
        port = "8080"
        type = "Http"
      }
      protocols {
        port = "80"
        type = "Http"
      }
    }

    rule {
      name              = "ganglia"
      source_ip_groups  = [azurerm_ip_group.this.id]
      destination_fqdns = ["cdnjs.cloudflare.com"]
      protocols {
        port = "443"
        type = "Https"
      }
    }
  }
}

# Define a firewall resource
resource "azurerm_firewall" "this" {
  name                = "${azurerm_virtual_network.this.name}-firewall"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  sku_name            = "AZFW_VNet"
  sku_tier            = "Standard"
  firewall_policy_id  = azurerm_firewall_policy.this.id

  # Define IP configuration for the firewall
  ip_configuration {
    name                 = "firewall-public-ip-config"
    subnet_id            = azurerm_subnet.firewall.id
    public_ip_address_id = azurerm_public_ip.this.id
  }

  depends_on = [
    resource.azurerm_firewall_policy_rule_collection_group.this
  ]
}
```

# /Users/mhjung/GitHub/terraform-databricks-sra/azure/tf/modules/azure_hub/routetable.tf
```
# Create an Azure route table resource
resource "azurerm_route_table" "this" {
  name                = "${local.prefix}-route-table"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
}

# Create a route in the route table to direct traffic to the firewall
resource "azurerm_route" "firewall_route" {
  name                   = "to-firewall"
  resource_group_name    = azurerm_resource_group.this.name
  route_table_name       = azurerm_route_table.this.name
  address_prefix         = "0.0.0.0/0"
  next_hop_type          = "VirtualAppliance"
  next_hop_in_ip_address = azurerm_firewall.this.ip_configuration.0.private_ip_address
}
```

